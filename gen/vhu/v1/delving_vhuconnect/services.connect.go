// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vhu/v1/services.proto

package delving_vhuconnect

import (
	context "context"
	delving_vhu "delving.vhu"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ObjectRecordServiceName is the fully-qualified name of the ObjectRecordService service.
	ObjectRecordServiceName = "vhu.v1.ObjectRecordService"
	// TimelineServiceName is the fully-qualified name of the TimelineService service.
	TimelineServiceName = "vhu.v1.TimelineService"
)

// ObjectRecordServiceClient is a client for the vhu.v1.ObjectRecordService service.
type ObjectRecordServiceClient interface {
	GetObject(context.Context, *connect_go.Request[delving_vhu.GetObjectRequest]) (*connect_go.Response[delving_vhu.GetObjectResponse], error)
	ListObjects(context.Context, *connect_go.Request[delving_vhu.ListObjectsRequest]) (*connect_go.Response[delving_vhu.ListObjectsResponse], error)
}

// NewObjectRecordServiceClient constructs a client for the vhu.v1.ObjectRecordService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewObjectRecordServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ObjectRecordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &objectRecordServiceClient{
		getObject: connect_go.NewClient[delving_vhu.GetObjectRequest, delving_vhu.GetObjectResponse](
			httpClient,
			baseURL+"/vhu.v1.ObjectRecordService/GetObject",
			opts...,
		),
		listObjects: connect_go.NewClient[delving_vhu.ListObjectsRequest, delving_vhu.ListObjectsResponse](
			httpClient,
			baseURL+"/vhu.v1.ObjectRecordService/ListObjects",
			opts...,
		),
	}
}

// objectRecordServiceClient implements ObjectRecordServiceClient.
type objectRecordServiceClient struct {
	getObject   *connect_go.Client[delving_vhu.GetObjectRequest, delving_vhu.GetObjectResponse]
	listObjects *connect_go.Client[delving_vhu.ListObjectsRequest, delving_vhu.ListObjectsResponse]
}

// GetObject calls vhu.v1.ObjectRecordService.GetObject.
func (c *objectRecordServiceClient) GetObject(ctx context.Context, req *connect_go.Request[delving_vhu.GetObjectRequest]) (*connect_go.Response[delving_vhu.GetObjectResponse], error) {
	return c.getObject.CallUnary(ctx, req)
}

// ListObjects calls vhu.v1.ObjectRecordService.ListObjects.
func (c *objectRecordServiceClient) ListObjects(ctx context.Context, req *connect_go.Request[delving_vhu.ListObjectsRequest]) (*connect_go.Response[delving_vhu.ListObjectsResponse], error) {
	return c.listObjects.CallUnary(ctx, req)
}

// ObjectRecordServiceHandler is an implementation of the vhu.v1.ObjectRecordService service.
type ObjectRecordServiceHandler interface {
	GetObject(context.Context, *connect_go.Request[delving_vhu.GetObjectRequest]) (*connect_go.Response[delving_vhu.GetObjectResponse], error)
	ListObjects(context.Context, *connect_go.Request[delving_vhu.ListObjectsRequest]) (*connect_go.Response[delving_vhu.ListObjectsResponse], error)
}

// NewObjectRecordServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewObjectRecordServiceHandler(svc ObjectRecordServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/vhu.v1.ObjectRecordService/GetObject", connect_go.NewUnaryHandler(
		"/vhu.v1.ObjectRecordService/GetObject",
		svc.GetObject,
		opts...,
	))
	mux.Handle("/vhu.v1.ObjectRecordService/ListObjects", connect_go.NewUnaryHandler(
		"/vhu.v1.ObjectRecordService/ListObjects",
		svc.ListObjects,
		opts...,
	))
	return "/vhu.v1.ObjectRecordService/", mux
}

// UnimplementedObjectRecordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedObjectRecordServiceHandler struct{}

func (UnimplementedObjectRecordServiceHandler) GetObject(context.Context, *connect_go.Request[delving_vhu.GetObjectRequest]) (*connect_go.Response[delving_vhu.GetObjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vhu.v1.ObjectRecordService.GetObject is not implemented"))
}

func (UnimplementedObjectRecordServiceHandler) ListObjects(context.Context, *connect_go.Request[delving_vhu.ListObjectsRequest]) (*connect_go.Response[delving_vhu.ListObjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vhu.v1.ObjectRecordService.ListObjects is not implemented"))
}

// TimelineServiceClient is a client for the vhu.v1.TimelineService service.
type TimelineServiceClient interface {
	GetTimeline(context.Context, *connect_go.Request[delving_vhu.GetTimelineRequest]) (*connect_go.Response[delving_vhu.GetTimelineResponse], error)
}

// NewTimelineServiceClient constructs a client for the vhu.v1.TimelineService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTimelineServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TimelineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &timelineServiceClient{
		getTimeline: connect_go.NewClient[delving_vhu.GetTimelineRequest, delving_vhu.GetTimelineResponse](
			httpClient,
			baseURL+"/vhu.v1.TimelineService/GetTimeline",
			opts...,
		),
	}
}

// timelineServiceClient implements TimelineServiceClient.
type timelineServiceClient struct {
	getTimeline *connect_go.Client[delving_vhu.GetTimelineRequest, delving_vhu.GetTimelineResponse]
}

// GetTimeline calls vhu.v1.TimelineService.GetTimeline.
func (c *timelineServiceClient) GetTimeline(ctx context.Context, req *connect_go.Request[delving_vhu.GetTimelineRequest]) (*connect_go.Response[delving_vhu.GetTimelineResponse], error) {
	return c.getTimeline.CallUnary(ctx, req)
}

// TimelineServiceHandler is an implementation of the vhu.v1.TimelineService service.
type TimelineServiceHandler interface {
	GetTimeline(context.Context, *connect_go.Request[delving_vhu.GetTimelineRequest]) (*connect_go.Response[delving_vhu.GetTimelineResponse], error)
}

// NewTimelineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTimelineServiceHandler(svc TimelineServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/vhu.v1.TimelineService/GetTimeline", connect_go.NewUnaryHandler(
		"/vhu.v1.TimelineService/GetTimeline",
		svc.GetTimeline,
		opts...,
	))
	return "/vhu.v1.TimelineService/", mux
}

// UnimplementedTimelineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTimelineServiceHandler struct{}

func (UnimplementedTimelineServiceHandler) GetTimeline(context.Context, *connect_go.Request[delving_vhu.GetTimelineRequest]) (*connect_go.Response[delving_vhu.GetTimelineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vhu.v1.TimelineService.GetTimeline is not implemented"))
}
